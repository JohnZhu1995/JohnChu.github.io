{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/first-post-from-john.md","hash":"db1e44597c81184478baec2fe7ac762b847ca305","modified":1646719154787},{"_id":"source/_posts/electron02-调用DLL.md","hash":"a1c026b2c94e97c6f26ec95f1b63babfe983b6fa","modified":1647325079070},{"_id":"source/_posts/electron02-调用DLL/01.png","hash":"2b455e675b5447586456e7bb68cd685fb0e3010c","modified":1646721129823},{"_id":"source/_posts/electron02-调用DLL/04.png","hash":"e1ca6d20ae488b3d1272cd8e71eb836ce0bb4ca9","modified":1646729906796},{"_id":"source/_posts/electron02-调用DLL/03.png","hash":"c90ecfdd8a6cc080ed5b01992fd6a6893c8715d2","modified":1646729488303},{"_id":"source/_posts/electron02-调用DLL/02.png","hash":"b1b1af829ff5735319fe83c8b37c73c18e8f2647","modified":1646728681860},{"_id":"themes/landscape/.npmignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1646719154787},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1646719154787},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1646719154795},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1646719154787},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1646719154788},{"_id":"source/_posts/electron02-调用DLL/05.png","hash":"b005c9e24f5b4a2c46e09214830c0120d5b224e0","modified":1646731211932},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1646719154788},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1646719154788},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1646719154788},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1646719154788},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1646719154789},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1646719154789},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1646719154789},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1646719154789},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1646719154789},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1646719154790},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1646719154790},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1646719154790},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1646719154794},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1646719154789},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1646719154795},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1646719154794},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1646719154795},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1646719154795},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1646719154794},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1646719154790},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1646719154795},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1646719154790},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1646719154794},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1646719154791},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1646719154791},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1646719154791},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1646719154792},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1646719154793},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1646719154793},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1646719154791},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1646719154793},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1646719154794},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1646719154793},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1646719154794},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1646719154804},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1646719154796},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1646719154798},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1646719154804},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1646719154791},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1646719154803},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1646719154804},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1646719154792},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1646719154805},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1646719154804},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1646719154805},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1646719154792},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1646719154806},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1646719154808},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1646719154792},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1646719154792},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1646719154793},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1646719154792},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1646719154793},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1646719154793},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1646719154796},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1646719154796},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1646719154796},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1646719154807},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1646719154797},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1646719154797},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1646719154807},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1646719154797},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1646719154797},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1646719154797},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1646719154798},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1646719154798},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1646719154798},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1646719154798},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1646719154799},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1646719154800},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1646719154805},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1646719154805},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1646719154801},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1646719154806},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1646719154806},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1646719154801},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1646719154806},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1646719154806},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1646719154801},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1646719154803},{"_id":"public/2022/02/17/first-post-from-john/index.html","hash":"acfae1fbf97e4425af8ba10088ad1942b10cd3fa","modified":1647325198163},{"_id":"public/archives/index.html","hash":"98aa4759bbea7bd5ba661c91eee66f91df9dc531","modified":1647325198163},{"_id":"public/archives/2022/index.html","hash":"b9bf10ae71acca6697e4c293cca6108ca7184d7b","modified":1647325198163},{"_id":"public/archives/2022/02/index.html","hash":"ad71dc4ae53bd6eb18ced38341c125b5ddab1ac3","modified":1647325198163},{"_id":"public/2022/03/09/electron02-调用DLL/index.html","hash":"ad7e7c557d78b753e627a33e55596b344a39aa85","modified":1647325198163},{"_id":"public/archives/2022/03/index.html","hash":"483203f956892b4a7081138ab8984579fe51d5e4","modified":1647325198163},{"_id":"public/index.html","hash":"d4c31857cac81866d40c48e426d86aaf90adbeac","modified":1647325198163},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1647325198163},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1647325198163},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1647325198163},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1647325198163},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1647325198163},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1647325198163},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1647325198163},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1647325198163},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1647325198163},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1647325198163},{"_id":"public/2022/03/09/electron02-调用DLL/01.png","hash":"2b455e675b5447586456e7bb68cd685fb0e3010c","modified":1647325198163},{"_id":"public/2022/03/09/electron02-调用DLL/02.png","hash":"b1b1af829ff5735319fe83c8b37c73c18e8f2647","modified":1647325198163},{"_id":"public/2022/03/09/electron02-调用DLL/03.png","hash":"c90ecfdd8a6cc080ed5b01992fd6a6893c8715d2","modified":1647325198163},{"_id":"public/2022/03/09/electron02-调用DLL/05.png","hash":"b005c9e24f5b4a2c46e09214830c0120d5b224e0","modified":1647325198163},{"_id":"public/2022/03/09/electron02-调用DLL/04.png","hash":"e1ca6d20ae488b3d1272cd8e71eb836ce0bb4ca9","modified":1647325198163},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1647325198163},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1647325198163},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1647325198163},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1647325198163},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1647325198163},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1647325198163},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1647325198163},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1647325198163},{"_id":"public/css/style.css","hash":"5f8dadd37d0052c557061018fe6f568f64fced9b","modified":1647325198163},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1647325198163},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1647325198163},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1647325198163},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1647325198163}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"electron02--调用DLL","date":"2022-03-09T02:14:47.000Z","_content":"\n# electron 学习--调用 .dll\n\n## 引言\n\n本文使用 node-ffi/ffi-napi 调用 C/C++编写的动态链接库(即 dll)，以实现一些硬件功能。\n\n## ffi\n\n> node-ffi 是一个用于使用纯 JavaScript 加载和调用动态库的 Node.js 插件。它可以用来在不编写任何 C++代码的情况下创建与本地 DLL 库的绑定。同时它负责处理跨 JavaScript 和 C 的类型转换。\n\n-   node-ffi 连接了 C 代码和 JS 代码, 通过内存共享来完成调用, 而内部又通过 ref,ref-array 和 ref-struct 来实现类型转换.\n\n## 安装 ffi\n\n> ffi-napi 是作者(node-ffi-napi)根据 node-ffi 修改而发布到 npm 仓库的, 可以直接通过 npm 安装, 支持 node.js 12 和 electron 高版本.\n\n1. 部署 node.js+electron 环境\n   请自行参照相关教程\n\n2. 安装 ffi-napi\n\n    ```\n    yarn add ffi-napi\n    ```\n\n3. 使用 ffi\n   在`main.js`中添加以下代码：\n\n    ```js\n    const ffi = require(\"ffi-napi\");\n    /**\n     * 先定义一个函数, 用来在窗口中显示字符\n     * @param {String} text\n     * @return {*} none\n     */\n    function showText(text) {\n        return new Buffer(text, \"ucs2\").toString(\"binary\");\n    }\n    // 通过ffi加载user32.dll\n    const myUser32 = new ffi.Library(\"user32\", {\n        // 声明这个dll中的一个函数\n        MessageBoxW: [\n            \"int32\",\n            [\"int32\", \"string\", \"string\", \"int32\"], // 用json的格式罗列其返回类型和参数类型\n        ],\n    });\n\n    // 调用user32.dll中的MessageBoxW()函数, 弹出一个对话框\n    const isOk = myUser32.MessageBoxW(\n        0,\n        showText(\"I am Node.JS!\"),\n        showText(\"Hello, World!\"),\n        1\n    );\n    console.log(isOk);\n    ```\n\n    启动程序：\n\n    ```\n    yarn start\n    ```\n\n    启动成功！出现了弹窗：\n\n    ![01](01.png)\n\n## 自己生成一个 dll\n\n0. 开始之前\n\n-   注意：\n\n    > ffi 只接受纯 C 函数, 确切的说, 是按照 C 标准编译的函数\n\n    下面来说说具体的原因:\n\n    在通过 ffi 引入 dll 的时候, 我们是这么声明的:\n\n    ```js\n    const myUser32 = new ffi.Library(\"user32\", {\n        // 声明这个dll中的一个函数\n        MessageBoxW: [\n            \"int32\",\n            [\"int32\", \"string\", \"string\", \"int32\"], // 用json的格式罗列其返回类型和参数类型\n        ],\n    });\n    ```\n\n    在`user32.dll`中, 寻找一个名字叫`MessageBoxW`的函数.\n\n    但是, C 和 C++的函数命名是不同的, 我指的是编译后的函数名字\n\n    对于 C, 函数`int func(int n)`会被编译为类似`_func`这样的名字.\n\n    对于 C++, 函数`int func(int n)`会被编译为类似`?func@@YAHH@Z`这样的名字.\n\n    同样是 C++, 函数`int func(int double)`会被编译为类似`?func@@YAHN@Z`这样的名字(和上一个不同).\n\n    名字中包含了较多信息, 比如:\n\n    > 参数的入栈方式\n    > 返回值的类型\n    > 参数的类型和数量\n\n    这是因为 C++有`函数重载`特性, 虽然函数命名是`func`, 但`int func(int n)`和`int func(int double)`完全是两个不同的函数, 编译器通过给它们赋予不同的名字来区分它们.ffi 在 dll 中查找函数名字的时候, **是用 C 风格来查找的**.\n\n    -   所以,如果你的函数使用 C++编译的, ffl 在这个 dll 中就找不到这个函数, 会出现错误`LINK 126`!\n\n1.  创建工程\n\n    使用 VS 创建一个 C++ **空项目**即可. 项目名成以 myDLL 为例（当然, 你也可以直接创建动态链接库 DLL）:\n\n    ![02](02.png)\n\n2.  函数声明\n    创建一个 myAdd.h 头文件，并声明一个`funAdd`函数：\n\n    ```c++\n    extern \"C\"\n    {\n        __declspec(dllexport) int funAdd(int a, int b);\n    }\n    ```\n\n    `extern \"C\"`的含义:\n\n    > 被 extern \"C\" 修饰的变量和函数是按照 C 语言方式编译和链接的\n\n    `__declspec(dllexport)`的含义:\n\n    > \\_\\_declspec(dllexport)用于 Windows 中的动态库中，声明导出函数、类、对象等供外面调用，省略给出.def 文件。即将函数、类等声明为导出函数，供其它程序调用，作为动态库的对外接口函数、类等。\n\n3.  函数定义\n\n    创建一个 myAdd.cpp 源文件，定义一个`funAdd`函数：\n\n    ```c++\n    #include \"myAdd.h\"\n    int funAdd(int a, int b)\n    {\n    return (a + b);\n    }\n    ```\n\n    创建完 myAdd.h 和 myAdd.cpp 如下图所示：\n\n    ![04](04.png)\n\n4.  修改配置类型为动态库.dll\n    在项目配置中, 选择生成动态库.dll(确保你配置了 Debug 和 Release, 同时确保你在 x64 环境下生成):\n\n    ![03](03.png)\n\n5.  生成 dll\n    右键项目选择生成即可, 生成的 myDLL.dll 位于项目目录下的 x64/Debug 中(根据你项目的配置去找, x64 或 x86, Debug 或 Release)。\n\n6.  测试 dll\n    将 myDLL.dll 拷贝至你的 electron 项目的根目录下的 dll 文件夹内\n    在`main.js`中添加如下代码:\n\n    ```js\n    const ffi = require(\"ffi-napi\"); // 如果前面已经定义过ffi, 就注释掉这一行\n    // myDLL.dll\n    const myDLL = new ffi.Library(\"/myDLL\", {\n        // 声明这个dll中的一个函数\n        funAdd: [\n            \"int\",\n            [\"int\", \"int\"], // 用json的格式罗列其返回类型和参数类型\n        ],\n    });\n\n    // 调用函数, 参数1和2, 将返回值直接打印出来, 预计为3\n    const result = myDLL.funAdd(1, 2);\n    console.log(`the result of 1 + 2 is: ` + result);\n    ```\n\n    启动程序：\n\n    ```\n    yarn start\n    ```\n\n    启动成功！shell 里打印出了相应的结果：\n\n    ![05](05.png)\n\n-   上面代码中，`ffi.Library`里第二个参数是一个 Json 结构，key 为方法名，value 为一个数组，数组的第一个参数是**返回值类型**，第二个参数是包含所有**传参类型**的子数组，如：如果返回值是空的话，那数组第一个参数应该是 void。如果返回值或者参数类型不知道是什么类型就写 void\\*。要使用 ffi 中的类型表示 C/C++语言中的类型，对照表如下：\n\n    > 基本类型\n    > int8--Signed 8-bit Integer\n    > uint8--Unsigned 8-bit Integer\n    > int16--Signed 16-bit Integer\n    > uint16--Unsigned 16-bit Integer\n    > int32--Signed 32-bit Integer\n    > uint32--Unsigned 32-bit Integer\n    > int64--Signed 64-bit Integer\n    > uint64--Unsigned 64-bit Integer\n    > float--Single Precision Floating Point Number (float)\n    > double--Double Precision Floating Point Number (double)\n    > pointer--Pointer Type\n    > string--Null-Terminated String (char \\*)\n    > 常见的 C 语言类型\n    > byte--unsigned char\n    > char--char\n    > uchar--unsigned char\n    > short--short\n    > ushort--unsigned short\n    > int--int\n    > uint--unsigned int\n    > long--long\n    > ulong--unsigned long\n    > longlong--long\n    > ulonglong--unsigned long long\n    > size_t--platform-dependent, usually pointer size\n\n    如果是指针类型，可以引入`ref-napi`和`ref-array`模块来表示\n\n    ```js\n    var ref = require(\"ref-napi\");\n    var refArray = require(\"ref-array\");\n\n    var intPtr = ref.refType(\"int\"); //int*类型\n    var charPtr = \"hello\"; //char*可以用string表示\n\n    //如果是个字符数组\n    var refArray = require(\"ref-array\");\n    var charPtrPtr = refArray(ref.types.char, 50); //50个大小的数组\n    ```\n\n    假如参数或者返回值是一个结构体，那就需要借助`ref-struct`模块来表示\n\n    ```js\n    var ref = require(\"ref-napi\");\n    var FFI = require(\"ffi-napi\");\n    var Struct = require(\"ref-struct\");\n\n    var TimeVal = Struct({\n        tv_sec: \"long\",\n        tv_usec: \"long\",\n    });\n    var TimeValPtr = ref.refType(TimeVal);\n    var lib = new FFI.Library(null, {\n        gettimeofday: [\"int\", [TimeValPtr, \"pointer\"]],\n    });\n    var tv = new TimeVal();\n    lib.gettimeofday(tv.ref(), null);\n    console.log(\"Seconds since epoch: \" + tv.tv_sec);\n    ```\n\n    ## 可能出现的错误\n\n    > 错误 1：LINK 126\n\n    这个错误, 意味者 electron 无法使用你的 dll.\n\n    ```js\n    const myDLL = new ffi.Library('/myDLL', {\n    ```\n\n    在上面这行代码中，`ffi.Library`的第一个参数, 不光指定了 dll 的名字, 还指定了 dll 的路径.\n    出现 LINK 126 有两个常见原因:\n\n    1. 没有这个**目录**, 或这个目录下没有 `myDLL.dll`\n    2. `myDLL.dll` 还**依赖了其他**的一些 dll, 但是 electron 无法找到这个 dll.\n\n    > 错误 2：LINK 127\n\n    出现 LINK 127 的可能原因:\n\n    1. electron 找到了你的 dll, 但是在 dll 中**找不到**你声名的函数(funAdd)。这通常是由于**函数名字错误**, 或者是**返回值类型**/**参数的个数**及**类型**不一致导致的.\n\n## References\n\n1. https://www.cnblogs.com/silenzio/p/11606389.html\n2. https://segmentfault.com/a/1190000019402908?utm_source=tag-newest\n","source":"_posts/electron02-调用DLL.md","raw":"---\ntitle: electron02--调用DLL\ndate: 2022-03-09 10:14:47\ntags:\n---\n\n# electron 学习--调用 .dll\n\n## 引言\n\n本文使用 node-ffi/ffi-napi 调用 C/C++编写的动态链接库(即 dll)，以实现一些硬件功能。\n\n## ffi\n\n> node-ffi 是一个用于使用纯 JavaScript 加载和调用动态库的 Node.js 插件。它可以用来在不编写任何 C++代码的情况下创建与本地 DLL 库的绑定。同时它负责处理跨 JavaScript 和 C 的类型转换。\n\n-   node-ffi 连接了 C 代码和 JS 代码, 通过内存共享来完成调用, 而内部又通过 ref,ref-array 和 ref-struct 来实现类型转换.\n\n## 安装 ffi\n\n> ffi-napi 是作者(node-ffi-napi)根据 node-ffi 修改而发布到 npm 仓库的, 可以直接通过 npm 安装, 支持 node.js 12 和 electron 高版本.\n\n1. 部署 node.js+electron 环境\n   请自行参照相关教程\n\n2. 安装 ffi-napi\n\n    ```\n    yarn add ffi-napi\n    ```\n\n3. 使用 ffi\n   在`main.js`中添加以下代码：\n\n    ```js\n    const ffi = require(\"ffi-napi\");\n    /**\n     * 先定义一个函数, 用来在窗口中显示字符\n     * @param {String} text\n     * @return {*} none\n     */\n    function showText(text) {\n        return new Buffer(text, \"ucs2\").toString(\"binary\");\n    }\n    // 通过ffi加载user32.dll\n    const myUser32 = new ffi.Library(\"user32\", {\n        // 声明这个dll中的一个函数\n        MessageBoxW: [\n            \"int32\",\n            [\"int32\", \"string\", \"string\", \"int32\"], // 用json的格式罗列其返回类型和参数类型\n        ],\n    });\n\n    // 调用user32.dll中的MessageBoxW()函数, 弹出一个对话框\n    const isOk = myUser32.MessageBoxW(\n        0,\n        showText(\"I am Node.JS!\"),\n        showText(\"Hello, World!\"),\n        1\n    );\n    console.log(isOk);\n    ```\n\n    启动程序：\n\n    ```\n    yarn start\n    ```\n\n    启动成功！出现了弹窗：\n\n    ![01](01.png)\n\n## 自己生成一个 dll\n\n0. 开始之前\n\n-   注意：\n\n    > ffi 只接受纯 C 函数, 确切的说, 是按照 C 标准编译的函数\n\n    下面来说说具体的原因:\n\n    在通过 ffi 引入 dll 的时候, 我们是这么声明的:\n\n    ```js\n    const myUser32 = new ffi.Library(\"user32\", {\n        // 声明这个dll中的一个函数\n        MessageBoxW: [\n            \"int32\",\n            [\"int32\", \"string\", \"string\", \"int32\"], // 用json的格式罗列其返回类型和参数类型\n        ],\n    });\n    ```\n\n    在`user32.dll`中, 寻找一个名字叫`MessageBoxW`的函数.\n\n    但是, C 和 C++的函数命名是不同的, 我指的是编译后的函数名字\n\n    对于 C, 函数`int func(int n)`会被编译为类似`_func`这样的名字.\n\n    对于 C++, 函数`int func(int n)`会被编译为类似`?func@@YAHH@Z`这样的名字.\n\n    同样是 C++, 函数`int func(int double)`会被编译为类似`?func@@YAHN@Z`这样的名字(和上一个不同).\n\n    名字中包含了较多信息, 比如:\n\n    > 参数的入栈方式\n    > 返回值的类型\n    > 参数的类型和数量\n\n    这是因为 C++有`函数重载`特性, 虽然函数命名是`func`, 但`int func(int n)`和`int func(int double)`完全是两个不同的函数, 编译器通过给它们赋予不同的名字来区分它们.ffi 在 dll 中查找函数名字的时候, **是用 C 风格来查找的**.\n\n    -   所以,如果你的函数使用 C++编译的, ffl 在这个 dll 中就找不到这个函数, 会出现错误`LINK 126`!\n\n1.  创建工程\n\n    使用 VS 创建一个 C++ **空项目**即可. 项目名成以 myDLL 为例（当然, 你也可以直接创建动态链接库 DLL）:\n\n    ![02](02.png)\n\n2.  函数声明\n    创建一个 myAdd.h 头文件，并声明一个`funAdd`函数：\n\n    ```c++\n    extern \"C\"\n    {\n        __declspec(dllexport) int funAdd(int a, int b);\n    }\n    ```\n\n    `extern \"C\"`的含义:\n\n    > 被 extern \"C\" 修饰的变量和函数是按照 C 语言方式编译和链接的\n\n    `__declspec(dllexport)`的含义:\n\n    > \\_\\_declspec(dllexport)用于 Windows 中的动态库中，声明导出函数、类、对象等供外面调用，省略给出.def 文件。即将函数、类等声明为导出函数，供其它程序调用，作为动态库的对外接口函数、类等。\n\n3.  函数定义\n\n    创建一个 myAdd.cpp 源文件，定义一个`funAdd`函数：\n\n    ```c++\n    #include \"myAdd.h\"\n    int funAdd(int a, int b)\n    {\n    return (a + b);\n    }\n    ```\n\n    创建完 myAdd.h 和 myAdd.cpp 如下图所示：\n\n    ![04](04.png)\n\n4.  修改配置类型为动态库.dll\n    在项目配置中, 选择生成动态库.dll(确保你配置了 Debug 和 Release, 同时确保你在 x64 环境下生成):\n\n    ![03](03.png)\n\n5.  生成 dll\n    右键项目选择生成即可, 生成的 myDLL.dll 位于项目目录下的 x64/Debug 中(根据你项目的配置去找, x64 或 x86, Debug 或 Release)。\n\n6.  测试 dll\n    将 myDLL.dll 拷贝至你的 electron 项目的根目录下的 dll 文件夹内\n    在`main.js`中添加如下代码:\n\n    ```js\n    const ffi = require(\"ffi-napi\"); // 如果前面已经定义过ffi, 就注释掉这一行\n    // myDLL.dll\n    const myDLL = new ffi.Library(\"/myDLL\", {\n        // 声明这个dll中的一个函数\n        funAdd: [\n            \"int\",\n            [\"int\", \"int\"], // 用json的格式罗列其返回类型和参数类型\n        ],\n    });\n\n    // 调用函数, 参数1和2, 将返回值直接打印出来, 预计为3\n    const result = myDLL.funAdd(1, 2);\n    console.log(`the result of 1 + 2 is: ` + result);\n    ```\n\n    启动程序：\n\n    ```\n    yarn start\n    ```\n\n    启动成功！shell 里打印出了相应的结果：\n\n    ![05](05.png)\n\n-   上面代码中，`ffi.Library`里第二个参数是一个 Json 结构，key 为方法名，value 为一个数组，数组的第一个参数是**返回值类型**，第二个参数是包含所有**传参类型**的子数组，如：如果返回值是空的话，那数组第一个参数应该是 void。如果返回值或者参数类型不知道是什么类型就写 void\\*。要使用 ffi 中的类型表示 C/C++语言中的类型，对照表如下：\n\n    > 基本类型\n    > int8--Signed 8-bit Integer\n    > uint8--Unsigned 8-bit Integer\n    > int16--Signed 16-bit Integer\n    > uint16--Unsigned 16-bit Integer\n    > int32--Signed 32-bit Integer\n    > uint32--Unsigned 32-bit Integer\n    > int64--Signed 64-bit Integer\n    > uint64--Unsigned 64-bit Integer\n    > float--Single Precision Floating Point Number (float)\n    > double--Double Precision Floating Point Number (double)\n    > pointer--Pointer Type\n    > string--Null-Terminated String (char \\*)\n    > 常见的 C 语言类型\n    > byte--unsigned char\n    > char--char\n    > uchar--unsigned char\n    > short--short\n    > ushort--unsigned short\n    > int--int\n    > uint--unsigned int\n    > long--long\n    > ulong--unsigned long\n    > longlong--long\n    > ulonglong--unsigned long long\n    > size_t--platform-dependent, usually pointer size\n\n    如果是指针类型，可以引入`ref-napi`和`ref-array`模块来表示\n\n    ```js\n    var ref = require(\"ref-napi\");\n    var refArray = require(\"ref-array\");\n\n    var intPtr = ref.refType(\"int\"); //int*类型\n    var charPtr = \"hello\"; //char*可以用string表示\n\n    //如果是个字符数组\n    var refArray = require(\"ref-array\");\n    var charPtrPtr = refArray(ref.types.char, 50); //50个大小的数组\n    ```\n\n    假如参数或者返回值是一个结构体，那就需要借助`ref-struct`模块来表示\n\n    ```js\n    var ref = require(\"ref-napi\");\n    var FFI = require(\"ffi-napi\");\n    var Struct = require(\"ref-struct\");\n\n    var TimeVal = Struct({\n        tv_sec: \"long\",\n        tv_usec: \"long\",\n    });\n    var TimeValPtr = ref.refType(TimeVal);\n    var lib = new FFI.Library(null, {\n        gettimeofday: [\"int\", [TimeValPtr, \"pointer\"]],\n    });\n    var tv = new TimeVal();\n    lib.gettimeofday(tv.ref(), null);\n    console.log(\"Seconds since epoch: \" + tv.tv_sec);\n    ```\n\n    ## 可能出现的错误\n\n    > 错误 1：LINK 126\n\n    这个错误, 意味者 electron 无法使用你的 dll.\n\n    ```js\n    const myDLL = new ffi.Library('/myDLL', {\n    ```\n\n    在上面这行代码中，`ffi.Library`的第一个参数, 不光指定了 dll 的名字, 还指定了 dll 的路径.\n    出现 LINK 126 有两个常见原因:\n\n    1. 没有这个**目录**, 或这个目录下没有 `myDLL.dll`\n    2. `myDLL.dll` 还**依赖了其他**的一些 dll, 但是 electron 无法找到这个 dll.\n\n    > 错误 2：LINK 127\n\n    出现 LINK 127 的可能原因:\n\n    1. electron 找到了你的 dll, 但是在 dll 中**找不到**你声名的函数(funAdd)。这通常是由于**函数名字错误**, 或者是**返回值类型**/**参数的个数**及**类型**不一致导致的.\n\n## References\n\n1. https://www.cnblogs.com/silenzio/p/11606389.html\n2. https://segmentfault.com/a/1190000019402908?utm_source=tag-newest\n","slug":"electron02-调用DLL","published":1,"updated":"2022-03-15T06:17:59.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqw2960000gotccl98cdtz","content":"<h1 id=\"electron-学习–调用-dll\"><a href=\"#electron-学习–调用-dll\" class=\"headerlink\" title=\"electron 学习–调用 .dll\"></a>electron 学习–调用 .dll</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>本文使用 node-ffi/ffi-napi 调用 C/C++编写的动态链接库(即 dll)，以实现一些硬件功能。</p>\n<h2 id=\"ffi\"><a href=\"#ffi\" class=\"headerlink\" title=\"ffi\"></a>ffi</h2><blockquote>\n<p>node-ffi 是一个用于使用纯 JavaScript 加载和调用动态库的 Node.js 插件。它可以用来在不编写任何 C++代码的情况下创建与本地 DLL 库的绑定。同时它负责处理跨 JavaScript 和 C 的类型转换。</p>\n</blockquote>\n<ul>\n<li>  node-ffi 连接了 C 代码和 JS 代码, 通过内存共享来完成调用, 而内部又通过 ref,ref-array 和 ref-struct 来实现类型转换.</li>\n</ul>\n<h2 id=\"安装-ffi\"><a href=\"#安装-ffi\" class=\"headerlink\" title=\"安装 ffi\"></a>安装 ffi</h2><blockquote>\n<p>ffi-napi 是作者(node-ffi-napi)根据 node-ffi 修改而发布到 npm 仓库的, 可以直接通过 npm 安装, 支持 node.js 12 和 electron 高版本.</p>\n</blockquote>\n<ol>\n<li><p>部署 node.js+electron 环境<br>请自行参照相关教程</p>\n</li>\n<li><p>安装 ffi-napi</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add ffi-napi</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 ffi<br>在<code>main.js</code>中添加以下代码：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ffi = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ffi-napi&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 先定义一个函数, 用来在窗口中显示字符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; <span class=\"variable\">text</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">none</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showText</span>(<span class=\"params\">text</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Buffer</span>(text, <span class=\"string\">&quot;ucs2&quot;</span>).<span class=\"title function_\">toString</span>(<span class=\"string\">&quot;binary&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过ffi加载user32.dll</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myUser32 = <span class=\"keyword\">new</span> ffi.<span class=\"title class_\">Library</span>(<span class=\"string\">&quot;user32&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明这个dll中的一个函数</span></span><br><span class=\"line\">    <span class=\"title class_\">MessageBoxW</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;int32&quot;</span>,</span><br><span class=\"line\">        [<span class=\"string\">&quot;int32&quot;</span>, <span class=\"string\">&quot;string&quot;</span>, <span class=\"string\">&quot;string&quot;</span>, <span class=\"string\">&quot;int32&quot;</span>], <span class=\"comment\">// 用json的格式罗列其返回类型和参数类型</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用user32.dll中的MessageBoxW()函数, 弹出一个对话框</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isOk = myUser32.<span class=\"title class_\">MessageBoxW</span>(</span><br><span class=\"line\">    <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"title function_\">showText</span>(<span class=\"string\">&quot;I am Node.JS!&quot;</span>),</span><br><span class=\"line\">    <span class=\"title function_\">showText</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>),</span><br><span class=\"line\">    <span class=\"number\">1</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(isOk);</span><br></pre></td></tr></table></figure>\n\n<p> 启动程序：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn start</span><br></pre></td></tr></table></figure>\n\n<p> 启动成功！出现了弹窗：</p>\n<p> <img src=\"/JohnChu.github.io/2022/03/09/electron02-%E8%B0%83%E7%94%A8DLL/01.png\" alt=\"01\"></p>\n</li>\n</ol>\n<h2 id=\"自己生成一个-dll\"><a href=\"#自己生成一个-dll\" class=\"headerlink\" title=\"自己生成一个 dll\"></a>自己生成一个 dll</h2><ol start=\"0\">\n<li>开始之前</li>\n</ol>\n<ul>\n<li><p>注意：</p>\n<blockquote>\n<p>ffi 只接受纯 C 函数, 确切的说, 是按照 C 标准编译的函数</p>\n</blockquote>\n<p>  下面来说说具体的原因:</p>\n<p>  在通过 ffi 引入 dll 的时候, 我们是这么声明的:</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myUser32 = <span class=\"keyword\">new</span> ffi.<span class=\"title class_\">Library</span>(<span class=\"string\">&quot;user32&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明这个dll中的一个函数</span></span><br><span class=\"line\">    <span class=\"title class_\">MessageBoxW</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;int32&quot;</span>,</span><br><span class=\"line\">        [<span class=\"string\">&quot;int32&quot;</span>, <span class=\"string\">&quot;string&quot;</span>, <span class=\"string\">&quot;string&quot;</span>, <span class=\"string\">&quot;int32&quot;</span>], <span class=\"comment\">// 用json的格式罗列其返回类型和参数类型</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>  在<code>user32.dll</code>中, 寻找一个名字叫<code>MessageBoxW</code>的函数.</p>\n<p>  但是, C 和 C++的函数命名是不同的, 我指的是编译后的函数名字</p>\n<p>  对于 C, 函数<code>int func(int n)</code>会被编译为类似<code>_func</code>这样的名字.</p>\n<p>  对于 C++, 函数<code>int func(int n)</code>会被编译为类似<code>?func@@YAHH@Z</code>这样的名字.</p>\n<p>  同样是 C++, 函数<code>int func(int double)</code>会被编译为类似<code>?func@@YAHN@Z</code>这样的名字(和上一个不同).</p>\n<p>  名字中包含了较多信息, 比如:</p>\n<blockquote>\n<p>参数的入栈方式<br>返回值的类型<br>参数的类型和数量</p>\n</blockquote>\n<p>  这是因为 C++有<code>函数重载</code>特性, 虽然函数命名是<code>func</code>, 但<code>int func(int n)</code>和<code>int func(int double)</code>完全是两个不同的函数, 编译器通过给它们赋予不同的名字来区分它们.ffi 在 dll 中查找函数名字的时候, <strong>是用 C 风格来查找的</strong>.</p>\n<ul>\n<li>  所以,如果你的函数使用 C++编译的, ffl 在这个 dll 中就找不到这个函数, 会出现错误<code>LINK 126</code>!</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p>创建工程</p>\n<p> 使用 VS 创建一个 C++ <strong>空项目</strong>即可. 项目名成以 myDLL 为例（当然, 你也可以直接创建动态链接库 DLL）:</p>\n<p> <img src=\"/JohnChu.github.io/2022/03/09/electron02-%E8%B0%83%E7%94%A8DLL/02.png\" alt=\"02\"></p>\n</li>\n<li><p>函数声明<br> 创建一个 myAdd.h 头文件，并声明一个<code>funAdd</code>函数：</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __declspec(dllexport) <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">funAdd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <code>extern &quot;C&quot;</code>的含义:</p>\n<blockquote>\n<p>被 extern “C” 修饰的变量和函数是按照 C 语言方式编译和链接的</p>\n</blockquote>\n<p> <code>__declspec(dllexport)</code>的含义:</p>\n<blockquote>\n<p>__declspec(dllexport)用于 Windows 中的动态库中，声明导出函数、类、对象等供外面调用，省略给出.def 文件。即将函数、类等声明为导出函数，供其它程序调用，作为动态库的对外接口函数、类等。</p>\n</blockquote>\n</li>\n<li><p>函数定义</p>\n<p> 创建一个 myAdd.cpp 源文件，定义一个<code>funAdd</code>函数：</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;myAdd.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">funAdd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (a + b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 创建完 myAdd.h 和 myAdd.cpp 如下图所示：</p>\n<p> <img src=\"/JohnChu.github.io/2022/03/09/electron02-%E8%B0%83%E7%94%A8DLL/04.png\" alt=\"04\"></p>\n</li>\n<li><p>修改配置类型为动态库.dll<br> 在项目配置中, 选择生成动态库.dll(确保你配置了 Debug 和 Release, 同时确保你在 x64 环境下生成):</p>\n<p> <img src=\"/JohnChu.github.io/2022/03/09/electron02-%E8%B0%83%E7%94%A8DLL/03.png\" alt=\"03\"></p>\n</li>\n<li><p>生成 dll<br> 右键项目选择生成即可, 生成的 myDLL.dll 位于项目目录下的 x64/Debug 中(根据你项目的配置去找, x64 或 x86, Debug 或 Release)。</p>\n</li>\n<li><p>测试 dll<br> 将 myDLL.dll 拷贝至你的 electron 项目的根目录下的 dll 文件夹内<br> 在<code>main.js</code>中添加如下代码:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ffi = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ffi-napi&quot;</span>); <span class=\"comment\">// 如果前面已经定义过ffi, 就注释掉这一行</span></span><br><span class=\"line\"><span class=\"comment\">// myDLL.dll</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myDLL = <span class=\"keyword\">new</span> ffi.<span class=\"title class_\">Library</span>(<span class=\"string\">&quot;/myDLL&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明这个dll中的一个函数</span></span><br><span class=\"line\">    <span class=\"attr\">funAdd</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;int&quot;</span>,</span><br><span class=\"line\">        [<span class=\"string\">&quot;int&quot;</span>, <span class=\"string\">&quot;int&quot;</span>], <span class=\"comment\">// 用json的格式罗列其返回类型和参数类型</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用函数, 参数1和2, 将返回值直接打印出来, 预计为3</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = myDLL.<span class=\"title function_\">funAdd</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`the result of 1 + 2 is: `</span> + result);</span><br></pre></td></tr></table></figure>\n\n<p> 启动程序：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn start</span><br></pre></td></tr></table></figure>\n\n<p> 启动成功！shell 里打印出了相应的结果：</p>\n<p> <img src=\"/JohnChu.github.io/2022/03/09/electron02-%E8%B0%83%E7%94%A8DLL/05.png\" alt=\"05\"></p>\n</li>\n</ol>\n<ul>\n<li><p>上面代码中，<code>ffi.Library</code>里第二个参数是一个 Json 结构，key 为方法名，value 为一个数组，数组的第一个参数是<strong>返回值类型</strong>，第二个参数是包含所有<strong>传参类型</strong>的子数组，如：如果返回值是空的话，那数组第一个参数应该是 void。如果返回值或者参数类型不知道是什么类型就写 void*。要使用 ffi 中的类型表示 C/C++语言中的类型，对照表如下：</p>\n<blockquote>\n<p>基本类型<br>int8–Signed 8-bit Integer<br>uint8–Unsigned 8-bit Integer<br>int16–Signed 16-bit Integer<br>uint16–Unsigned 16-bit Integer<br>int32–Signed 32-bit Integer<br>uint32–Unsigned 32-bit Integer<br>int64–Signed 64-bit Integer<br>uint64–Unsigned 64-bit Integer<br>float–Single Precision Floating Point Number (float)<br>double–Double Precision Floating Point Number (double)<br>pointer–Pointer Type<br>string–Null-Terminated String (char *)<br>常见的 C 语言类型<br>byte–unsigned char<br>char–char<br>uchar–unsigned char<br>short–short<br>ushort–unsigned short<br>int–int<br>uint–unsigned int<br>long–long<br>ulong–unsigned long<br>longlong–long<br>ulonglong–unsigned long long<br>size_t–platform-dependent, usually pointer size</p>\n</blockquote>\n<p>  如果是指针类型，可以引入<code>ref-napi</code>和<code>ref-array</code>模块来表示</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ref = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ref-napi&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> refArray = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ref-array&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> intPtr = ref.<span class=\"title function_\">refType</span>(<span class=\"string\">&quot;int&quot;</span>); <span class=\"comment\">//int*类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> charPtr = <span class=\"string\">&quot;hello&quot;</span>; <span class=\"comment\">//char*可以用string表示</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果是个字符数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> refArray = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ref-array&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> charPtrPtr = <span class=\"title function_\">refArray</span>(ref.<span class=\"property\">types</span>.<span class=\"property\">char</span>, <span class=\"number\">50</span>); <span class=\"comment\">//50个大小的数组</span></span><br></pre></td></tr></table></figure>\n\n<p>  假如参数或者返回值是一个结构体，那就需要借助<code>ref-struct</code>模块来表示</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ref = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ref-napi&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">FFI</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ffi-napi&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Struct</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ref-struct&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">TimeVal</span> = <span class=\"title class_\">Struct</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">tv_sec</span>: <span class=\"string\">&quot;long&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">tv_usec</span>: <span class=\"string\">&quot;long&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">TimeValPtr</span> = ref.<span class=\"title function_\">refType</span>(<span class=\"title class_\">TimeVal</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> lib = <span class=\"keyword\">new</span> <span class=\"variable constant_\">FFI</span>.<span class=\"title class_\">Library</span>(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">gettimeofday</span>: [<span class=\"string\">&quot;int&quot;</span>, [<span class=\"title class_\">TimeValPtr</span>, <span class=\"string\">&quot;pointer&quot;</span>]],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> tv = <span class=\"keyword\">new</span> <span class=\"title class_\">TimeVal</span>();</span><br><span class=\"line\">lib.<span class=\"title function_\">gettimeofday</span>(tv.<span class=\"title function_\">ref</span>(), <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Seconds since epoch: &quot;</span> + tv.<span class=\"property\">tv_sec</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可能出现的错误\"><a href=\"#可能出现的错误\" class=\"headerlink\" title=\"可能出现的错误\"></a>可能出现的错误</h2><blockquote>\n<p>错误 1：LINK 126</p>\n</blockquote>\n<p>  这个错误, 意味者 electron 无法使用你的 dll.</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myDLL = <span class=\"keyword\">new</span> ffi.<span class=\"title class_\">Library</span>(<span class=\"string\">&#x27;/myDLL&#x27;</span>, &#123;</span><br></pre></td></tr></table></figure>\n\n<p>  在上面这行代码中，<code>ffi.Library</code>的第一个参数, 不光指定了 dll 的名字, 还指定了 dll 的路径.<br>  出现 LINK 126 有两个常见原因:</p>\n<ol>\n<li>没有这个<strong>目录</strong>, 或这个目录下没有 <code>myDLL.dll</code></li>\n<li><code>myDLL.dll</code> 还<strong>依赖了其他</strong>的一些 dll, 但是 electron 无法找到这个 dll.</li>\n</ol>\n<blockquote>\n<p>错误 2：LINK 127</p>\n</blockquote>\n<p>  出现 LINK 127 的可能原因:</p>\n<ol>\n<li>electron 找到了你的 dll, 但是在 dll 中<strong>找不到</strong>你声名的函数(funAdd)。这通常是由于<strong>函数名字错误</strong>, 或者是<strong>返回值类型</strong>/<strong>参数的个数</strong>及<strong>类型</strong>不一致导致的.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ol>\n<li><a href=\"https://www.cnblogs.com/silenzio/p/11606389.html\">https://www.cnblogs.com/silenzio/p/11606389.html</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000019402908?utm_source=tag-newest\">https://segmentfault.com/a/1190000019402908?utm_source=tag-newest</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"electron-学习–调用-dll\"><a href=\"#electron-学习–调用-dll\" class=\"headerlink\" title=\"electron 学习–调用 .dll\"></a>electron 学习–调用 .dll</h1><h2 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h2><p>本文使用 node-ffi/ffi-napi 调用 C/C++编写的动态链接库(即 dll)，以实现一些硬件功能。</p>\n<h2 id=\"ffi\"><a href=\"#ffi\" class=\"headerlink\" title=\"ffi\"></a>ffi</h2><blockquote>\n<p>node-ffi 是一个用于使用纯 JavaScript 加载和调用动态库的 Node.js 插件。它可以用来在不编写任何 C++代码的情况下创建与本地 DLL 库的绑定。同时它负责处理跨 JavaScript 和 C 的类型转换。</p>\n</blockquote>\n<ul>\n<li>  node-ffi 连接了 C 代码和 JS 代码, 通过内存共享来完成调用, 而内部又通过 ref,ref-array 和 ref-struct 来实现类型转换.</li>\n</ul>\n<h2 id=\"安装-ffi\"><a href=\"#安装-ffi\" class=\"headerlink\" title=\"安装 ffi\"></a>安装 ffi</h2><blockquote>\n<p>ffi-napi 是作者(node-ffi-napi)根据 node-ffi 修改而发布到 npm 仓库的, 可以直接通过 npm 安装, 支持 node.js 12 和 electron 高版本.</p>\n</blockquote>\n<ol>\n<li><p>部署 node.js+electron 环境<br>请自行参照相关教程</p>\n</li>\n<li><p>安装 ffi-napi</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add ffi-napi</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 ffi<br>在<code>main.js</code>中添加以下代码：</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ffi = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ffi-napi&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 先定义一个函数, 用来在窗口中显示字符</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> &#123;<span class=\"type\">String</span>&#125; <span class=\"variable\">text</span></span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> &#123;<span class=\"type\">*</span>&#125; <span class=\"variable\">none</span></span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">showText</span>(<span class=\"params\">text</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Buffer</span>(text, <span class=\"string\">&quot;ucs2&quot;</span>).<span class=\"title function_\">toString</span>(<span class=\"string\">&quot;binary&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 通过ffi加载user32.dll</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myUser32 = <span class=\"keyword\">new</span> ffi.<span class=\"title class_\">Library</span>(<span class=\"string\">&quot;user32&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明这个dll中的一个函数</span></span><br><span class=\"line\">    <span class=\"title class_\">MessageBoxW</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;int32&quot;</span>,</span><br><span class=\"line\">        [<span class=\"string\">&quot;int32&quot;</span>, <span class=\"string\">&quot;string&quot;</span>, <span class=\"string\">&quot;string&quot;</span>, <span class=\"string\">&quot;int32&quot;</span>], <span class=\"comment\">// 用json的格式罗列其返回类型和参数类型</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用user32.dll中的MessageBoxW()函数, 弹出一个对话框</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> isOk = myUser32.<span class=\"title class_\">MessageBoxW</span>(</span><br><span class=\"line\">    <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"title function_\">showText</span>(<span class=\"string\">&quot;I am Node.JS!&quot;</span>),</span><br><span class=\"line\">    <span class=\"title function_\">showText</span>(<span class=\"string\">&quot;Hello, World!&quot;</span>),</span><br><span class=\"line\">    <span class=\"number\">1</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(isOk);</span><br></pre></td></tr></table></figure>\n\n<p> 启动程序：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn start</span><br></pre></td></tr></table></figure>\n\n<p> 启动成功！出现了弹窗：</p>\n<p> <img src=\"/JohnChu.github.io/2022/03/09/electron02-%E8%B0%83%E7%94%A8DLL/01.png\" alt=\"01\"></p>\n</li>\n</ol>\n<h2 id=\"自己生成一个-dll\"><a href=\"#自己生成一个-dll\" class=\"headerlink\" title=\"自己生成一个 dll\"></a>自己生成一个 dll</h2><ol start=\"0\">\n<li>开始之前</li>\n</ol>\n<ul>\n<li><p>注意：</p>\n<blockquote>\n<p>ffi 只接受纯 C 函数, 确切的说, 是按照 C 标准编译的函数</p>\n</blockquote>\n<p>  下面来说说具体的原因:</p>\n<p>  在通过 ffi 引入 dll 的时候, 我们是这么声明的:</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myUser32 = <span class=\"keyword\">new</span> ffi.<span class=\"title class_\">Library</span>(<span class=\"string\">&quot;user32&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明这个dll中的一个函数</span></span><br><span class=\"line\">    <span class=\"title class_\">MessageBoxW</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;int32&quot;</span>,</span><br><span class=\"line\">        [<span class=\"string\">&quot;int32&quot;</span>, <span class=\"string\">&quot;string&quot;</span>, <span class=\"string\">&quot;string&quot;</span>, <span class=\"string\">&quot;int32&quot;</span>], <span class=\"comment\">// 用json的格式罗列其返回类型和参数类型</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>  在<code>user32.dll</code>中, 寻找一个名字叫<code>MessageBoxW</code>的函数.</p>\n<p>  但是, C 和 C++的函数命名是不同的, 我指的是编译后的函数名字</p>\n<p>  对于 C, 函数<code>int func(int n)</code>会被编译为类似<code>_func</code>这样的名字.</p>\n<p>  对于 C++, 函数<code>int func(int n)</code>会被编译为类似<code>?func@@YAHH@Z</code>这样的名字.</p>\n<p>  同样是 C++, 函数<code>int func(int double)</code>会被编译为类似<code>?func@@YAHN@Z</code>这样的名字(和上一个不同).</p>\n<p>  名字中包含了较多信息, 比如:</p>\n<blockquote>\n<p>参数的入栈方式<br>返回值的类型<br>参数的类型和数量</p>\n</blockquote>\n<p>  这是因为 C++有<code>函数重载</code>特性, 虽然函数命名是<code>func</code>, 但<code>int func(int n)</code>和<code>int func(int double)</code>完全是两个不同的函数, 编译器通过给它们赋予不同的名字来区分它们.ffi 在 dll 中查找函数名字的时候, <strong>是用 C 风格来查找的</strong>.</p>\n<ul>\n<li>  所以,如果你的函数使用 C++编译的, ffl 在这个 dll 中就找不到这个函数, 会出现错误<code>LINK 126</code>!</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p>创建工程</p>\n<p> 使用 VS 创建一个 C++ <strong>空项目</strong>即可. 项目名成以 myDLL 为例（当然, 你也可以直接创建动态链接库 DLL）:</p>\n<p> <img src=\"/JohnChu.github.io/2022/03/09/electron02-%E8%B0%83%E7%94%A8DLL/02.png\" alt=\"02\"></p>\n</li>\n<li><p>函数声明<br> 创建一个 myAdd.h 头文件，并声明一个<code>funAdd</code>函数：</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    __declspec(dllexport) <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">funAdd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> <code>extern &quot;C&quot;</code>的含义:</p>\n<blockquote>\n<p>被 extern “C” 修饰的变量和函数是按照 C 语言方式编译和链接的</p>\n</blockquote>\n<p> <code>__declspec(dllexport)</code>的含义:</p>\n<blockquote>\n<p>__declspec(dllexport)用于 Windows 中的动态库中，声明导出函数、类、对象等供外面调用，省略给出.def 文件。即将函数、类等声明为导出函数，供其它程序调用，作为动态库的对外接口函数、类等。</p>\n</blockquote>\n</li>\n<li><p>函数定义</p>\n<p> 创建一个 myAdd.cpp 源文件，定义一个<code>funAdd</code>函数：</p>\n <figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;myAdd.h&quot;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">funAdd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> (a + b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 创建完 myAdd.h 和 myAdd.cpp 如下图所示：</p>\n<p> <img src=\"/JohnChu.github.io/2022/03/09/electron02-%E8%B0%83%E7%94%A8DLL/04.png\" alt=\"04\"></p>\n</li>\n<li><p>修改配置类型为动态库.dll<br> 在项目配置中, 选择生成动态库.dll(确保你配置了 Debug 和 Release, 同时确保你在 x64 环境下生成):</p>\n<p> <img src=\"/JohnChu.github.io/2022/03/09/electron02-%E8%B0%83%E7%94%A8DLL/03.png\" alt=\"03\"></p>\n</li>\n<li><p>生成 dll<br> 右键项目选择生成即可, 生成的 myDLL.dll 位于项目目录下的 x64/Debug 中(根据你项目的配置去找, x64 或 x86, Debug 或 Release)。</p>\n</li>\n<li><p>测试 dll<br> 将 myDLL.dll 拷贝至你的 electron 项目的根目录下的 dll 文件夹内<br> 在<code>main.js</code>中添加如下代码:</p>\n <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ffi = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ffi-napi&quot;</span>); <span class=\"comment\">// 如果前面已经定义过ffi, 就注释掉这一行</span></span><br><span class=\"line\"><span class=\"comment\">// myDLL.dll</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> myDLL = <span class=\"keyword\">new</span> ffi.<span class=\"title class_\">Library</span>(<span class=\"string\">&quot;/myDLL&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 声明这个dll中的一个函数</span></span><br><span class=\"line\">    <span class=\"attr\">funAdd</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;int&quot;</span>,</span><br><span class=\"line\">        [<span class=\"string\">&quot;int&quot;</span>, <span class=\"string\">&quot;int&quot;</span>], <span class=\"comment\">// 用json的格式罗列其返回类型和参数类型</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用函数, 参数1和2, 将返回值直接打印出来, 预计为3</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> result = myDLL.<span class=\"title function_\">funAdd</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`the result of 1 + 2 is: `</span> + result);</span><br></pre></td></tr></table></figure>\n\n<p> 启动程序：</p>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn start</span><br></pre></td></tr></table></figure>\n\n<p> 启动成功！shell 里打印出了相应的结果：</p>\n<p> <img src=\"/JohnChu.github.io/2022/03/09/electron02-%E8%B0%83%E7%94%A8DLL/05.png\" alt=\"05\"></p>\n</li>\n</ol>\n<ul>\n<li><p>上面代码中，<code>ffi.Library</code>里第二个参数是一个 Json 结构，key 为方法名，value 为一个数组，数组的第一个参数是<strong>返回值类型</strong>，第二个参数是包含所有<strong>传参类型</strong>的子数组，如：如果返回值是空的话，那数组第一个参数应该是 void。如果返回值或者参数类型不知道是什么类型就写 void*。要使用 ffi 中的类型表示 C/C++语言中的类型，对照表如下：</p>\n<blockquote>\n<p>基本类型<br>int8–Signed 8-bit Integer<br>uint8–Unsigned 8-bit Integer<br>int16–Signed 16-bit Integer<br>uint16–Unsigned 16-bit Integer<br>int32–Signed 32-bit Integer<br>uint32–Unsigned 32-bit Integer<br>int64–Signed 64-bit Integer<br>uint64–Unsigned 64-bit Integer<br>float–Single Precision Floating Point Number (float)<br>double–Double Precision Floating Point Number (double)<br>pointer–Pointer Type<br>string–Null-Terminated String (char *)<br>常见的 C 语言类型<br>byte–unsigned char<br>char–char<br>uchar–unsigned char<br>short–short<br>ushort–unsigned short<br>int–int<br>uint–unsigned int<br>long–long<br>ulong–unsigned long<br>longlong–long<br>ulonglong–unsigned long long<br>size_t–platform-dependent, usually pointer size</p>\n</blockquote>\n<p>  如果是指针类型，可以引入<code>ref-napi</code>和<code>ref-array</code>模块来表示</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ref = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ref-napi&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> refArray = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ref-array&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> intPtr = ref.<span class=\"title function_\">refType</span>(<span class=\"string\">&quot;int&quot;</span>); <span class=\"comment\">//int*类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> charPtr = <span class=\"string\">&quot;hello&quot;</span>; <span class=\"comment\">//char*可以用string表示</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//如果是个字符数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> refArray = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ref-array&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> charPtrPtr = <span class=\"title function_\">refArray</span>(ref.<span class=\"property\">types</span>.<span class=\"property\">char</span>, <span class=\"number\">50</span>); <span class=\"comment\">//50个大小的数组</span></span><br></pre></td></tr></table></figure>\n\n<p>  假如参数或者返回值是一个结构体，那就需要借助<code>ref-struct</code>模块来表示</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> ref = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ref-napi&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"variable constant_\">FFI</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ffi-napi&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Struct</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;ref-struct&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">TimeVal</span> = <span class=\"title class_\">Struct</span>(&#123;</span><br><span class=\"line\">    <span class=\"attr\">tv_sec</span>: <span class=\"string\">&quot;long&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">tv_usec</span>: <span class=\"string\">&quot;long&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">TimeValPtr</span> = ref.<span class=\"title function_\">refType</span>(<span class=\"title class_\">TimeVal</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> lib = <span class=\"keyword\">new</span> <span class=\"variable constant_\">FFI</span>.<span class=\"title class_\">Library</span>(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">gettimeofday</span>: [<span class=\"string\">&quot;int&quot;</span>, [<span class=\"title class_\">TimeValPtr</span>, <span class=\"string\">&quot;pointer&quot;</span>]],</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"keyword\">var</span> tv = <span class=\"keyword\">new</span> <span class=\"title class_\">TimeVal</span>();</span><br><span class=\"line\">lib.<span class=\"title function_\">gettimeofday</span>(tv.<span class=\"title function_\">ref</span>(), <span class=\"literal\">null</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Seconds since epoch: &quot;</span> + tv.<span class=\"property\">tv_sec</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可能出现的错误\"><a href=\"#可能出现的错误\" class=\"headerlink\" title=\"可能出现的错误\"></a>可能出现的错误</h2><blockquote>\n<p>错误 1：LINK 126</p>\n</blockquote>\n<p>  这个错误, 意味者 electron 无法使用你的 dll.</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myDLL = <span class=\"keyword\">new</span> ffi.<span class=\"title class_\">Library</span>(<span class=\"string\">&#x27;/myDLL&#x27;</span>, &#123;</span><br></pre></td></tr></table></figure>\n\n<p>  在上面这行代码中，<code>ffi.Library</code>的第一个参数, 不光指定了 dll 的名字, 还指定了 dll 的路径.<br>  出现 LINK 126 有两个常见原因:</p>\n<ol>\n<li>没有这个<strong>目录</strong>, 或这个目录下没有 <code>myDLL.dll</code></li>\n<li><code>myDLL.dll</code> 还<strong>依赖了其他</strong>的一些 dll, 但是 electron 无法找到这个 dll.</li>\n</ol>\n<blockquote>\n<p>错误 2：LINK 127</p>\n</blockquote>\n<p>  出现 LINK 127 的可能原因:</p>\n<ol>\n<li>electron 找到了你的 dll, 但是在 dll 中<strong>找不到</strong>你声名的函数(funAdd)。这通常是由于<strong>函数名字错误</strong>, 或者是<strong>返回值类型</strong>/<strong>参数的个数</strong>及<strong>类型</strong>不一致导致的.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h2><ol>\n<li><a href=\"https://www.cnblogs.com/silenzio/p/11606389.html\">https://www.cnblogs.com/silenzio/p/11606389.html</a></li>\n<li><a href=\"https://segmentfault.com/a/1190000019402908?utm_source=tag-newest\">https://segmentfault.com/a/1190000019402908?utm_source=tag-newest</a></li>\n</ol>\n"},{"title":"first post from john","date":"2022-02-17T13:50:28.000Z","_content":"\n# hello there， i'm john!\n","source":"_posts/first-post-from-john.md","raw":"---\ntitle: first post from john\ndate: 2022-02-17 21:50:28\ntags:\n---\n\n# hello there， i'm john!\n","slug":"first-post-from-john","published":1,"updated":"2022-03-08T05:59:14.787Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl0rqw29a0001gotc4bi71v9q","content":"<h1 id=\"hello-there，-i’m-john\"><a href=\"#hello-there，-i’m-john\" class=\"headerlink\" title=\"hello there， i’m john!\"></a>hello there， i’m john!</h1>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"hello-there，-i’m-john\"><a href=\"#hello-there，-i’m-john\" class=\"headerlink\" title=\"hello there， i’m john!\"></a>hello there， i’m john!</h1>"}],"PostAsset":[{"_id":"source/_posts/electron02-调用DLL/01.png","post":"cl0rqw2960000gotccl98cdtz","slug":"01.png","modified":1,"renderable":1},{"_id":"source/_posts/electron02-调用DLL/02.png","post":"cl0rqw2960000gotccl98cdtz","slug":"02.png","modified":1,"renderable":1},{"_id":"source/_posts/electron02-调用DLL/03.png","post":"cl0rqw2960000gotccl98cdtz","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/electron02-调用DLL/04.png","post":"cl0rqw2960000gotccl98cdtz","slug":"04.png","modified":1,"renderable":1},{"_id":"source/_posts/electron02-调用DLL/05.png","post":"cl0rqw2960000gotccl98cdtz","slug":"05.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[],"Tag":[]}}